{
	"info": {
		"_postman_id": "738b640c-6570-44db-899f-fe3980028211",
		"name": "Flow_Show_Book",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Integration Gherkin",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "509c5819-2bd7-4bc3-ad32-6eb4a5da21ce",
						"exec": [
							"postman.setGlobalVariable('postmanBDD', responseBody);",
							"",
							"pm.test(\"Status Response\", function () { ",
							"    pm.response.to.have.status(200); ",
							"});",
							"    "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://jamesmessinger.com/postman-bdd/dist/postman-bdd.min.js",
					"protocol": "https",
					"host": [
						"jamesmessinger",
						"com"
					],
					"path": [
						"postman-bdd",
						"dist",
						"postman-bdd.min.js"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create User",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c73eddaa-b030-4a82-9a96-794872e8aa60",
						"exec": [
							"eval(globals.postmanBDD);",
							"describe(\"Check response body\", function () {",
							"    it (\"Payload must be valid and have a body\", function () {",
							"        pm.response.to.have.status(200); // equivalente al codigo de estado de creacion",
							"        pm.response.to.be.withBody; // body tiene que exitir",
							"        pm.response.to.be.json; // además que sea un JSON válido",
							"    });",
							" ",
							"    it (\"Content-Type is present\", function () {",
							"        pm.response.to.have.header(\"Content-Type\");",
							"    });",
							"});",
							"",
							"describe(\"Check response json\", function () {",
							"    var jsonData = pm.response.json();",
							"",
							"    it (\"Check atributes of json user\", function () {",
							"        pm.expect(jsonData.data.email).to.equal(request.data.email);",
							"        pm.expect(jsonData.data.first_name).to.equal(request.data.first_name);",
							"        pm.expect(jsonData.data.last_name).to.equal(request.data.last_name);",
							"        pm.expect(jsonData.data.locale).to.equal(request.data.locale);",
							"    });",
							"",
							"    pm.environment.set(\"EMAIL_USER\", request.data.email);",
							"    pm.environment.set(\"PASSWORD_USER\", request.data.password);",
							"    pm.environment.set(\"FIRST_NAME_USER\", request.data.first_name);",
							"    pm.environment.set(\"LAST_NAME_USER\", request.data.last_name);",
							"    pm.environment.set(\"LOCALE_USER\", request.data.locale);",
							"});",
							"",
							"//pm.test(\"Response time is less than 850ms\", function () {",
							"//    pm.expect(pm.response.responseTime).to.be.below(850);",
							"//    });",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"value": "application/x-www-form-urlencoded",
						"type": "text"
					}
				],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "first_name",
							"value": "Test4",
							"type": "text"
						},
						{
							"key": "last_name",
							"value": "Test4",
							"type": "text"
						},
						{
							"key": "locale",
							"value": "en",
							"type": "text"
						},
						{
							"key": "email",
							"value": "test4@hotmail.com",
							"type": "text"
						},
						{
							"key": "password",
							"value": "123456789",
							"type": "text"
						},
						{
							"key": "password_confirmation",
							"value": "123456789",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{HOST}}/auth/",
					"host": [
						"{{HOST}}"
					],
					"path": [
						"auth",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Sign in",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "db497c5f-e728-4758-ae42-1f91e7e24446",
						"exec": [
							"eval(globals.postmanBDD);",
							"describe(\"Check response body\", function () {",
							"    it (\"Payload must be valid and have a body\", function () {",
							"        pm.response.to.have.status(200); // equivalente al codigo de estado de creacion",
							"        pm.response.to.be.withBody; // body tiene que exitir",
							"        pm.response.to.be.json; // además que sea un JSON válido",
							"    });",
							" ",
							"    it (\"Content-Type is present\", function () {",
							"        pm.response.to.have.header(\"Content-Type\");",
							"    });",
							"});",
							"",
							"describe(\"Check response json\", function () {",
							"    var jsonData = pm.response.json();",
							"",
							"    it (\"Check atributes of json user login\", function () {",
							"        pm.expect(jsonData.data.email).to.equal(request.data.email);",
							"        pm.expect(jsonData.data.first_name).to.equal(pm.environment.get(\"FIRST_NAME_USER\"));",
							"        pm.expect(jsonData.data.last_name).to.equal(pm.environment.get(\"LAST_NAME_USER\"));",
							"        pm.expect(jsonData.data.locale).to.equal(pm.environment.get(\"LOCALE_USER\"));",
							"    });",
							"",
							"    pm.environment.set(\"ACCESS_TOKEN\",postman.getResponseHeader(\"access-token\"));",
							"    pm.environment.set(\"CLIENT\",postman.getResponseHeader(\"client\"));",
							"    pm.environment.set(\"UID\",postman.getResponseHeader(\"uid\"));",
							"    pm.environment.set(\"EXPIRE\",postman.getResponseHeader(\"expiry\"));",
							"    pm.environment.set(\"ID_USER\", jsonData.data.id);",
							"});",
							"",
							"//pm.test(\"Response time is less than 850ms\", function () {",
							"//    pm.expect(pm.response.responseTime).to.be.below(850);",
							"//    });"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "email",
						"type": "text",
						"value": "alex@hotmail.com",
						"disabled": true
					},
					{
						"key": "first_name",
						"type": "text",
						"value": "Alex",
						"disabled": true
					},
					{
						"key": "last_name",
						"type": "text",
						"value": "Falcon",
						"disabled": true
					},
					{
						"key": "password",
						"type": "text",
						"value": "123456789",
						"disabled": true
					},
					{
						"key": "Content-Type",
						"name": "Content-Type",
						"type": "text",
						"value": "application/x-www-form-urlencoded"
					}
				],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "email",
							"value": "{{EMAIL_USER}}",
							"type": "text"
						},
						{
							"key": "password",
							"value": "{{PASSWORD_USER}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{HOST}}/auth/sign_in",
					"host": [
						"{{HOST}}"
					],
					"path": [
						"auth",
						"sign_in"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Book",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "35c93f43-d6e2-45b5-9682-1bb9d3e8f3cb",
						"exec": [
							"eval(globals.postmanBDD);",
							"describe(\"Check response body\", function () {",
							"    it (\"Payload must be valid and have a body\", function () {",
							"        pm.response.to.have.status(201); // equivalente al codigo de estado de creacion",
							"        pm.response.to.be.withBody; // body tiene que exitir",
							"        pm.response.to.be.json; // además que sea un JSON válido",
							"    });",
							" ",
							"     it (\"Content-Type is present\", function () {",
							"        pm.response.to.have.header(\"Content-Type\");",
							"    });",
							"});",
							"",
							"describe(\"Check response json\", function () {",
							"    var jsonData = pm.response.json();",
							"    it (\"Check atributes of json book\", function () {",
							"        pm.expect(jsonData.gender).to.equal(request.data.gender);",
							"        pm.expect(jsonData.author).to.equal(request.data.author);",
							"        pm.expect(jsonData.image).to.equal(request.data.image);",
							"        pm.expect(jsonData.title).to.equal(request.data.title);",
							"        pm.expect(jsonData.editor).to.equal(request.data.editor);",
							"        pm.expect(jsonData.year).to.equal(request.data.year);",
							"    });",
							"    pm.environment.set(\"ID_BOOK\", JSON.parse(responseBody).id);",
							"    pm.environment.set(\"GENDER_BOOK\", jsonData.gender);",
							"    pm.environment.set(\"AUTHOR_BOOK\", jsonData.author);",
							"    pm.environment.set(\"IMAGE_BOOK\", jsonData.image);",
							"    pm.environment.set(\"TITTLE_BOOK\", jsonData.title);",
							"    pm.environment.set(\"EDITOR_BOOK\", jsonData.editor); ",
							"    pm.environment.set(\"YEAR_BOOK\", jsonData.year);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "access-token",
						"value": "{{ACCESS_TOKEN}}",
						"type": "text"
					},
					{
						"key": "client",
						"value": "{{CLIENT}}",
						"type": "text"
					},
					{
						"key": "expire",
						"value": "{{EXPIRE}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded",
						"type": "text"
					},
					{
						"key": "uid",
						"value": "{{UID}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "gender",
							"value": "Genero4",
							"description": "|",
							"type": "text"
						},
						{
							"key": "author",
							"value": "Autor4",
							"type": "text"
						},
						{
							"key": "image",
							"value": "Imagen4",
							"type": "text"
						},
						{
							"key": "title",
							"value": "Titulo4",
							"type": "text"
						},
						{
							"key": "editor",
							"value": "Editorial4",
							"type": "text"
						},
						{
							"key": "year",
							"value": "10-10-2019",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{HOST}}/api/v1/book",
					"host": [
						"{{HOST}}"
					],
					"path": [
						"api",
						"v1",
						"book"
					]
				}
			},
			"response": []
		},
		{
			"name": "Show Book",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "c371968a-a94d-411b-b4ba-457577fe6ae3",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "9ab13e02-cae1-436c-9ee7-005dc3d9aadd",
						"exec": [
							"eval(globals.postmanBDD);",
							"describe(\"Check response body\", function () {",
							"    it (\"Payload must be valid and have a body\", function () {",
							"        pm.response.to.have.status(200); // equivalente al codigo de estado de creacion",
							"        pm.response.to.be.withBody; // body tiene que exitir",
							"        pm.response.to.be.json; // además que sea un JSON válido",
							"    });",
							" ",
							"     it (\"Content-Type is present\", function () {",
							"        pm.response.to.have.header(\"Content-Type\");",
							"    });",
							"});",
							"",
							"describe(\"Check response json\", function () {",
							"    var jsonData = pm.response.json();",
							"    it (\"Check atributes of json book\", function () {",
							"        pm.expect(jsonData.id).to.equal(pm.environment.get(\"ID_BOOK\"));",
							"        pm.expect(jsonData.gender).to.equal(pm.environment.get(\"GENDER_BOOK\"));",
							"        pm.expect(jsonData.author).to.equal(pm.environment.get(\"AUTHOR_BOOK\"));",
							"        pm.expect(jsonData.image).to.equal(pm.environment.get(\"IMAGE_BOOK\"));",
							"        pm.expect(jsonData.title).to.equal(pm.environment.get(\"TITTLE_BOOK\"));",
							"        pm.expect(jsonData.editor).to.equal(pm.environment.get(\"EDITOR_BOOK\"));",
							"        pm.expect(jsonData.year).to.equal(pm.environment.get(\"YEAR_BOOK\"));",
							"    });",
							"    ",
							"    //Liberacion de variables",
							"    pm.environment.unset(\"EMAIL_USER\");",
							"    pm.environment.unset(\"PASSWORD_USER\");",
							"    pm.environment.unset(\"FIRST_NAME_USER\");",
							"    pm.environment.unset(\"LAST_NAME_USER\");",
							"    pm.environment.unset(\"LOCALE_USER\");",
							"    pm.environment.unset(\"ACCESS_TOKEN\");",
							"    pm.environment.unset(\"CLIENT\");",
							"    pm.environment.unset(\"UID\");",
							"    pm.environment.unset(\"EXPIRE\");",
							"    pm.environment.unset(\"ID_USER\");",
							"    pm.environment.unset(\"ID_BOOK\");",
							"    pm.environment.unset(\"GENDER_BOOK\");",
							"    pm.environment.unset(\"AUTHOR_BOOK\");",
							"    pm.environment.unset(\"IMAGE_BOOK\");",
							"    pm.environment.unset(\"TITTLE_BOOK\");",
							"    pm.environment.unset(\"EDITOR_BOOK\");",
							"    pm.environment.unset(\"YEAR_BOOK\");",
							"});",
							"",
							"//pm.test(\"Response time is less than 300ms\", function () {",
							"//    pm.expect(pm.response.responseTime).to.be.below(300);",
							"//    });"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "basic"
				},
				"method": "GET",
				"header": [
					{
						"key": "access-token",
						"value": "{{ACCESS_TOKEN}}",
						"type": "text"
					},
					{
						"key": "client",
						"value": "{{CLIENT}}",
						"type": "text"
					},
					{
						"key": "expire",
						"value": "{{EXPIRE}}",
						"type": "text"
					},
					{
						"key": "uid",
						"value": "{{UID}}",
						"type": "text"
					},
					{
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "{{HOST}}/api/v1/book/{{ID_BOOK}}",
					"host": [
						"{{HOST}}"
					],
					"path": [
						"api",
						"v1",
						"book",
						"{{ID_BOOK}}"
					]
				}
			},
			"response": []
		}
	],
	"protocolProfileBehavior": {}
}